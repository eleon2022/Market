# -*- coding: utf-8 -*-import loggingimport jsonimport timefrom telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButtonfrom telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandlerBOT_TOKEN = "8190734067:AAFHgihi5tIdoCKiXBxntOgWNBzguCNVzsE"OFFERS_FILE = "offers.json"# Logginglogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)logger = logging.getLogger(__name__)# States(LANG_SELECT, MENU_SELECT, SELL_PRODUCT, SELL_OCTANE, SELL_QUANTITY, SELL_UNIT, SELL_PRICE, SELL_CURRENCY,SELL_PHONE, SELL_PHOTO, BUY_SELECT = range(11)# Products with EmojisPRODUCTS = {    "🛢️ كاز معمل": {"ku": "🛢️ گازۆیل کارگە"},    "⚗️ نافتا": {"ku": "⚗️ نافتا"},    "⛽ بنزين": {"ku": "⛽ بەنزین"},    "🔥 كاز فلاش": {"ku": "🔥 گازۆیل فلاش"},    "🧴 دهن معمل": {"ku": "🧴 ئۆیل کارگە"},    "✅ فلاوين مواصفات": {"ku": "✅ فلاوین تایبەتمەند"},    "🏋️ فلاوين ثقيل": {"ku": "🏋️ فلاوین قەڵەو"}}UNITS = {"طن": {"ku": "تەن"}, "لتر": {"ku": "لیتر"}}CURRENCIES = {"دينار": {"ku": "دینار"}, "دولار": {"ku": "دۆلار"}}def load_offers():    try:        with open(OFFERS_FILE, 'r', encoding='utf-8') as f:            return json.load(f)    except:        return []def save_offers(offers):    with open(OFFERS_FILE, 'w', encoding='utf-8') as f:        json.dump(offers, f, ensure_ascii=False, indent=2)async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data.clear()    keyboard = [["العربية", "کوردی"]]    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)    text = "أهلاً وسهلاً بكم في بورصة نفط كردستان والعراق!\nيرجى اختيار اللغة:"    await update.message.reply_text(text, reply_markup=reply_markup)    return LANG_SELECTasync def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):    lang = update.message.text    if lang not in ["العربية", "کوردی"]:        return LANG_SELECT    context.user_data["lang"] = lang    return await show_main_menu(update, context)async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):        "أهلاً وسهلاً بكم في بورصة نفط كردستان والعراق!"        "يرجى اختيار اللغة:"    if lang == "کوردی":        keyboard = [["🛒 فرۆشتن", "🔍 کڕین"], ["📦 پیشکەشەکانم", "📢 پیشکەشەکان"], ["♻️ دەستپێکردنەوە"]]        msg = "تکایە هەڵبژێرە:"    else:        msg = "اختر أحد الخيارات:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))    return MENU_SELECTasync def menu_select(update: Update, context: ContextTypes.DEFAULT_TYPE):    lang = context.user_data.get("lang", "العربية")    text = update.message.text    if text in ["🛒 بيع", "🛒 فرۆشتن"]:        products = list(PRODUCTS.keys())        if lang == "کوردی":            products = [PRODUCTS[p]["ku"] for p in PRODUCTS]        keyboard = [products[i:i+2] for i in range(0, len(products), 2)]        msg = "اختر نوع المنتج:" if lang == "العربية" else "جۆری بەرهەم هەڵبژێرە:"        await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))        return SELL_PRODUCT    if text in ["♻️ ابدأ من جديد", "♻️ دەستپێکردنەوە"]:        return await start(update, context)    if text in ["🔍 شراء", "🔍 کڕین"]:        return await buy_start(update, context)    if text in ["📦 عروضي", "📦 پیشکەشەکانم"]:        return await my_offers(update, context)    return MENU_SELECTasync def sell_product(update: Update, context: ContextTypes.DEFAULT_TYPE):    lang = context.user_data.get("lang", "العربية")    product = update.message.text    if lang == "کوردی":        for ar, ku in PRODUCTS.items():            if product == ku["ku"]:                product = ar                break    context.user_data["product"] = product    if "بنزين" in product or "بەنزین" in product:        msg = "أدخل نسبة الأوكتان:" if lang == "العربية" else "رێژەی ئۆکتان بنووسە:"        await update.message.reply_text(msg)        return SELL_OCTANE    else:        msg = "أدخل الكمية:" if lang == "العربية" else "بڕی بەرهەم بنووسە:"        await update.message.reply_text(msg)        return SELL_QUANTITYasync def sell_octane(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["octane"] = update.message.text    lang = context.user_data.get("lang", "العربية")    msg = "أدخل الكمية:" if lang == "العربية" else "بڕی بەرهەم بنووسە:"    await update.message.reply_text(msg)    return SELL_QUANTITYasync def sell_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["quantity"] = update.message.text    lang = context.user_data.get("lang", "العربية")    keyboard = [["طن", "لتر"]] if lang == "العربية" else [["تەن", "لیتر"]]    msg = "اختر الوحدة:" if lang == "العربية" else "یەکەی بەرهەم هەڵبژێرە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))    return SELL_UNITasync def sell_unit(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["unit"] = update.message.text    lang = context.user_data.get("lang", "العربية")    msg = "أدخل السعر:" if lang == "العربية" else "نرخی بەرهەم بنووسە:"    await update.message.reply_text(msg)    return SELL_PRICEasync def sell_price(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["price"] = update.message.text    lang = context.user_data.get("lang", "العربية")    keyboard = [["دينار", "دولار"]] if lang == "العربية" else [["دینار", "دۆلار"]]    msg = "اختر العملة:" if lang == "العربية" else "جۆری دراو هەڵبژێرە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))    return SELL_CURRENCYasync def sell_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["currency"] = update.message.text    lang = context.user_data.get("lang", "العربية")    msg = "أدخل رقم ☎️ الهاتف:" if lang == "العربية" else "ژمارەی تەلەفۆن بنووسە:"    await update.message.reply_text(msg)    return SELL_PHONEasync def sell_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["phone"] = update.message.text    lang = context.user_data.get("lang", "العربية")    msg = "أرسل صورة المنتج أو اضغط /skip للتخطي:" if lang == "العربية" else "وێنە بنێرە یان /skip بنووسە:"    await update.message.reply_text(msg)    return SELL_PHOTOasync def sell_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["photo"] = update.message.photo[-1].file_id    return await finalize_offer(update, context)async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):    context.user_data["photo"] = None    return await finalize_offer(update, context)async def finalize_offer(update: Update, context: ContextTypes.DEFAULT_TYPE):    user_id = update.message.from_user.id    data = context.user_data    offer = {        "user_id": user_id,        "lang": data.get("lang"),        "product": data.get("product"),        "octane": data.get("octane"),        "quantity": data.get("quantity"),        "unit": data.get("unit"),        "price": data.get("price"),        "currency": data.get("currency"),        "phone": data.get("phone"),        "photo": data.get("photo"),        "timestamp": time.time()    }    offers = load_offers()    offers.append(offer)    save_offers(offers)    lang = data.get("lang", "العربية")    msg = "✅ تم حفظ العرض بنجاح!" if lang == "العربية" else "✅ پێشکەشەکە تۆمار کرا!"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())    return await show_main_menu(update, context)async def buy_start(update: Update, context: ContextTypes.DEFAULT_TYPE):    lang = context.user_data.get("lang", "العربية")    products = list(PRODUCTS.keys())    if lang == "کوردی":        products = [PRODUCTS[p]["ku"] for p in PRODUCTS]    keyboard = [products[i:i+2] for i in range(0, len(products), 2)]    msg = "اختر المنتج لعرض العروض:" if lang == "العربية" else "جۆری بەرهەم هەڵبژێرە بۆ پیشکەشەکان:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))    return BUY_SELECTasync def buy_select(update: Update, context: ContextTypes.DEFAULT_TYPE):    lang = context.user_data.get("lang", "العربية")    selected = update.message.text    if lang == "کوردی":        for ar, ku in PRODUCTS.items():            if selected == ku["ku"]:                selected = ar                break    offers = load_offers()    matched = [o for o in offers if o["product"] == selected]    if not matched:        msg = "لا توجد عروض حالياً." if lang == "العربية" else "هیچ پێشکەشێک نییە."        await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())        return await show_main_menu(update, context)    for offer in matched:        msg = f"{offer['product']}"        if offer.get("octane"):            msg += f"\n⛽ أوكتان: {offer['octane']}"        msg += f"\n📦 الكمية: {offer['quantity']} {offer['unit']}"        msg += f"\n💰 السعر: {offer['price']} {offer['currency']}"        msg += f"\n☎️ ☎️ الهاتف: {offer['phone']}"        if offer.get("photo"):            await update.message.reply_photo(offer["photo"], caption=msg)        else:            await update.message.reply_text(msg)    return await show_main_menu(update, context)async def my_offers(update: Update, context: ContextTypes.DEFAULT_TYPE):    user_id = update.message.from_user.id    lang = context.user_data.get("lang", "العربية")    offers = load_offers()    my = [o for o in offers if o["user_id"] == user_id]    if not my:        msg = "لا تملك عروض حالياً." if lang == "العربية" else "هیچ پێشکەشێکت نییە."        await update.message.reply_text(msg)        return await show_main_menu(update, context)    for idx, offer in enumerate(my):        msg = f"🔢 رقم العرض: {idx + 1}\n🛢️ المنتج: {offer['product']}"        if offer.get("octane"):            msg += f"\n⛽ أوكتان: {offer['octane']}"        msg += f"\n📦 الكمية: {offer['quantity']} {offer['unit']}"        msg += f"\n💰 السعر: {offer['price']} {offer['currency']}"        msg += f"\n☎️ ☎️ الهاتف: {offer['phone']}"        btn = InlineKeyboardMarkup.from_button(            InlineKeyboardButton("❌ حذف هذا العرض", callback_data=f"delete_{idx}")        )        if offer.get("photo"):            await update.message.reply_photo(offer["photo"], caption=msg, reply_markup=btn)        else:            await update.message.reply_text(msg, reply_markup=btn)    return MENU_SELECTasync def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):    query = update.callback_query    await query.answer()    user_id = query.from_user.id    index = int(query.data.split("_")[1])    offers = load_offers()    user_offers = [o for o in offers if o["user_id"] == user_id]    if index >= len(user_offers):        await query.edit_message_text("العرض غير موجود.")        return    offer_to_delete = user_offers[index]    offers.remove(offer_to_delete)    save_offers(offers)    await query.edit_message_text("✅ تم حذف العرض.")    return MENU_SELECTasync def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):    lang = context.user_data.get("lang", "العربية")    msg = "تم إلغاء العملية." if lang == "العربية" else "کارەکە وەستا."    await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())    return ConversationHandler.ENDdef main():    app = Application.builder().token(BOT_TOKEN).build()    conv_handler = ConversationHandler(        entry_points=[CommandHandler("start", start)],        states={            LANG_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],            MENU_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_select)],            SELL_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_product)],            SELL_OCTANE: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_octane)],            SELL_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_quantity)],            SELL_UNIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_unit)],            SELL_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_price)],            SELL_CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_currency)],            SELL_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, sell_phone)],            SELL_PHOTO: [                MessageHandler(filters.PHOTO, sell_photo),                CommandHandler("skip", skip_photo)            ],            BUY_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_select)],        },        fallbacks=[CommandHandler("cancel", cancel)],        allow_reentry=True    )    app.add_handler(conv_handler)    app.add_handler(MessageHandler(filters.Regex("^(🔍 شراء|🔍 کڕین)$"), buy_start))    app.add_handler(MessageHandler(filters.Regex("^(📦 عروضي|📦 پیشکەشەکانم)$"), my_offers))    app.add_handler(CallbackQueryHandler(handle_delete_callback, pattern="^delete_"))    app.run_polling()if __name__ == "__main__":    main()async def start_offer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    text = update.message.text    if "بيع" in text or "فرۆشتن" in text:        context.user_data["type"] = "sell"    else:        context.user_data["type"] = "buy"    lang = context.user_data.get("lang", "ar")    context.user_data["offer"] = {"type": context.user_data["type"]}    products = ["كاز معمل", "نافتا", "بنزين", "كاز فلاش", "دهن معمل", "فلاوين مواصفات", "فلاوين قرص"]         if lang == "ar" else ["کاز کارگە", "نافتا", "بەنزین", "کاز فلاش", "ئۆیل کارگە", "فلاوین تایبەتمەند", "فلاوین قورس"]    keyboard = [[p] for p in products]    msg = "اختر اسم المنتج:" if lang == "ar" else "ناوی بەرهەم هەلبژێرە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))    return PRODUCT_NAMEasync def handle_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["product"] = update.message.text    if update.message.text in ["بنزين", "بەنزین"]:        msg = "ما هي نسبة الأوكتان؟" if context.user_data["lang"] == "ar" else "ڕێژەی ئۆکتان چەندە؟"        await update.message.reply_text(msg)        return OCTANE_LEVEL    return await ask_quantity(update, context)async def handle_octane(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["octane"] = update.message.text    return await ask_quantity(update, context)async def ask_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    msg = "أدخل الكمية:" if context.user_data["lang"] == "ar" else "بڕ بنووسە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())    return QUANTITYasync def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["quantity"] = update.message.text    units = [["لتر", "طن"]] if context.user_data["lang"] == "ar" else [["لیتر", "تەن"]]    msg = "اختر الوحدة:" if context.user_data["lang"] == "ar" else "یەکە هەلبژێرە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(units, one_time_keyboard=True, resize_keyboard=True))    return UNITasync def handle_unit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["unit"] = update.message.text    msg = "أدخل السعر:" if context.user_data["lang"] == "ar" else "نرخ بنووسە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())    return PRICEasync def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["price"] = update.message.text    currencies = [["دينار", "دولار"]] if context.user_data["lang"] == "ar" else [["دینار", "دۆلار"]]    msg = "اختر العملة:" if context.user_data["lang"] == "ar" else "دراو هەلبژێرە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(currencies, one_time_keyboard=True, resize_keyboard=True))    return CURRENCYasync def handle_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["currency"] = update.message.text    msg = "أدخل رقم ☎️ الهاتف للتواصل:" if context.user_data["lang"] == "ar" else "ژمارەی تەلەفۆن بنووسە:"    await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())    return PHONEasync def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["phone"] = update.message.text    msg = "اسم 🏭 التاجر أو المعمل:" if context.user_data["lang"] == "ar" else "ناوی تاجەر یان کارگە:"    await update.message.reply_text(msg)    return TRADERasync def handle_trader(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["trader"] = update.message.text    msg = "سلفر (نسبة الكبريت) (%):" if context.user_data["lang"] == "ar" else "سلفر (نسبة الكبريت) (%):"    await update.message.reply_text(msg)    return SULFURasync def handle_sulfur(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["sulfur"] = update.message.text    msg = "طواف (الكثافة):" if context.user_data["lang"] == "ar" else "طواف (الكثافة):"    await update.message.reply_text(msg)    return DENSITYasync def handle_density(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["density"] = update.message.text    msg = "أرسل صورة (اختياري) أو اكتب /skip للتخطي:" if context.user_data["lang"] == "ar" else "وێنە بنێرە یان بنووسە /skip:"    await update.message.reply_text(msg)    return PHOTOasync def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["photo"] = update.message.photo[-1].file_id    return await finalize_offer(update, context)async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    context.user_data["offer"]["photo"] = None    return await finalize_offer(update, context)import jsonimport osOFFERS_FILE = "offers.json"def load_offers():    if not os.path.exists(OFFERS_FILE):        return []    with open(OFFERS_FILE, "r", encoding="utf-8") as f:        offers = json.load(f)    # حذف العروض الأقدم من 24 ساعة    now = time.time()    offers = [o for o in offers if now - o.get("timestamp", now) <= 86400]    return offersdef save_offer(new_offer):    offers = load_offers()    offers.append(new_offer)    with open(OFFERS_FILE, "w", encoding="utf-8") as f:        json.dump(offers, f, ensure_ascii=False, indent=2)async def finalize_offer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:    offer = context.user_data["offer"]    offer["timestamp"] = time.time()    offer["user_id"] = update.effective_user.id    save_offer(offer)    lang = context.user_data.get("lang", "ar")    details = (details = (
        keyboard.append(["ابدأ من جديد"])
    f"📦 {'عرض بيع' if offer['type'] == 'sell' else 'طلب شراء'}:\n"
    f""
    f"📌 المنتج: {offer['product']}\n"
    f""
    f"{f'⛽ أوكتان: {offer.get("octane")}\n"
    f"' if 'octane' in offer else ''}"
    f"⚖️ الكمية: {offer['quantity']} {offer['unit']}\n"
    f""
    f"💰 السعر: {offer['price']} {offer['currency']}\n"
    f""
    f"☎️ ☎️ الهاتف: {offer['phone']}\n"
    f""
    f"🏭 التاجر/المعمل: {offer['trader']}\n"
    f""
    f"🔥 سلفر (نسبة الكبريت): {offer['sulfur']}\n"
    f""
)
        f"💧 طواف (الكثافة): {offer['density']}"    )    if offer.get("photo"):        await update.message.reply_photo(offer["photo"], caption=details)    else:        await update.message.reply_text(details)    return await start(update, context)async def show_filtered_offers(update: Update, context: ContextTypes.DEFAULT_TYPE, type_filter=None):    lang = context.user_data.get("lang", "ar")    offers = load_offers()    if type_filter:        offers = [o for o in offers if o.get("type") == type_filter]    if not offers:        msg = "لا توجد عروض حالياً." if lang == "ar" else "هیچ پێشکەشێک نییە."        await update.message.reply_text(msg)        return    for offer in offers:        details = (details = (
    f"📦 {'عرض بيع' if offer['type'] == 'sell' else 'طلب شراء'}:\n"
    f""
    f"📌 المنتج: {offer['product']}\n"
    f""
    f"{f'⛽ أوكتان: {offer.get("octane")}\n"
    f"' if 'octane' in offer else ''}"
    f"⚖️ الكمية: {offer['quantity']} {offer['unit']}\n"
    f""
    f"💰 السعر: {offer['price']} {offer['currency']}\n"
    f""
    f"☎️ ☎️ الهاتف: {offer['phone']}\n"
    f""
    f"🏭 التاجر/المعمل: {offer['trader']}\n"
    f""
    f"🔥 سلفر (نسبة الكبريت): {offer['sulfur']}\n"
    f""
)
            f"💧 طواف (الكثافة): {offer['density']}"        )        if offer.get("photo"):            await update.message.reply_photo(offer["photo"], caption=details)        else:            await update.message.reply_text(details)async def show_my_offers(update: Update, context: ContextTypes.DEFAULT_TYPE):    user_id = update.effective_user.id    offers = [o for o in load_offers() if o.get("user_id") == user_id]    lang = context.user_data.get("lang", "ar")    if not offers:        msg = "لا توجد عروض باسمك." if lang == "ar" else "هیچ پێشکەشی تایبەتی تۆ نییە."        await update.message.reply_text(msg)        return    for offer in offers:        details = (details = (
    f"📦 {'عرض بيع' if offer['type'] == 'sell' else 'طلب شراء'}:\n"
    f""
    f"📌 المنتج: {offer['product']}\n"
    f""
    f"{f'⛽ أوكتان: {offer.get("octane")}\n"
    f"' if 'octane' in offer else ''}"
    f"⚖️ الكمية: {offer['quantity']} {offer['unit']}\n"
    f""
    f"💰 السعر: {offer['price']} {offer['currency']}\n"
    f""
    f"☎️ ☎️ الهاتف: {offer['phone']}\n"
    f""
    f"🏭 التاجر/المعمل: {offer['trader']}\n"
    f""
    f"🔥 سلفر (نسبة الكبريت): {offer['sulfur']}\n"
    f""
)
            f"💧 طواف (الكثافة): {offer['density']}"        )        if offer.get("photo"):            await update.message.reply_photo(offer["photo"], caption=details)        else:            await update.message.reply_text(details)